% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/insert_cassette.R
\name{insert_cassette}
\alias{insert_cassette}
\title{Insert a cassette to record HTTP requests}
\usage{
insert_cassette(name, record = "once", match_requests_on = NULL,
  re_record_interval = NULL, tag = NULL, tags = NULL,
  update_content_length_header = FALSE, decode_compressed_response = FALSE,
  allow_playback_repeats = FALSE, allow_unused_http_interactions = TRUE,
  exclusive = FALSE, serialize_with = "yaml", persist_with = "FileSystem",
  preserve_exact_body_bytes = TRUE, ignore_cassettes = FALSE)
}
\arguments{
\item{name}{The name of the cassette. vcr will sanitize this to ensure it
is a valid file name.}

\item{record}{The record mode. Default: "once". In the future we'll support
"once", "all", "none", "new_episodes". See \link{recording} for more information}

\item{match_requests_on}{List of request matchers
to use to determine what recorded HTTP interaction to replay. Defaults to
\code{["method", "uri"]}. The built-in matchers are "method", "uri", "host",
"path", "headers" and "body"}

\item{re_record_interval}{(integer) When given, the
cassette will be re-recorded at the given interval, in seconds.
IGNORED FOR NOW.}

\item{tag}{(character) Used to apply tagged \code{before_record}
and \code{before_playback} hooks to the cassette. IGNORED FOR NOW.}

\item{tags}{Used to apply multiple tags to
a cassette so that tagged \code{before_record} and \code{before_playback} hooks
will apply to the cassette. IGNORED FOR NOW.}

\item{update_content_length_header}{(logical) Whether or
not to overwrite the \code{Content-Length} header of the responses to
match the length of the response body. Default: \code{FALSE}}

\item{decode_compressed_response}{(logical) Whether or
not to decode compressed responses before recording the cassette.
This makes the cassette more human readable. Default: \code{FALSE}.
IGNORED FOR NOW.}

\item{allow_playback_repeats}{(logical) Whether or not to
allow a single HTTP interaction to be played back multiple times.
Default: \code{FALSE}.}

\item{allow_unused_http_interactions}{(logical) If set to
false, an error will be raised if a cassette is ejected before all
previously recorded HTTP interactions have been used.
Default: \code{TRUE}. Note that when an error has already occurred
(as indicated by the \code{$!} variable) unused interactions will be
allowed so that we don't silence the original error (which is almost
certainly more interesting/important). IGNORED FOR NOW.}

\item{exclusive}{(logical) Whether or not to use only this
cassette and to completely ignore any cassettes in the cassettes stack.
Default: \code{FALSE}. IGNORED FOR NOW.}

\item{serialize_with}{(character) Which serializer to use.
Valid values are "yaml" (default), the only one supported for now.}

\item{persist_with}{(character) Which cassette persister to
use. Default: "file_system". You can also register and use a
custom persister.}

\item{preserve_exact_body_bytes}{(logical) Whether or not
to base64 encode the bytes of the requests and responses for
this cassette when serializing it. See also \code{preserve_exact_body_bytes}
in \code{\link[=vcr_configure]{vcr_configure()}}}

\item{ignore_cassettes}{(logical) turn \pkg{vcr} off and ignore cassette
insertions (so that no error is raised). Default: \code{FALSE}}
}
\description{
Insert a cassette to record HTTP requests
}
\examples{
\dontrun{
library(vcr)
library(crul)
vcr_configure(dir = "~/fixtures/vcr_cassettes")

(x <- insert_cassette(name = "leo5"))
cassette_current()
x$new_recorded_interactions
cli <- crul::HttpClient$new(url = "https://httpbin.org")
cli$get("get")
x$new_recorded_interactions
# very important when using inject_cassette: eject when done
x$eject() # same as eject_cassette("leo5")
}
}
\seealso{
\code{\link[=use_cassette]{use_cassette()}}, \code{\link[=eject_cassette]{eject_cassette()}}
}
